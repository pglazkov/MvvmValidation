<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras</name>
    </assembly>
    <members>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener">
            <summary>
            Helper class for adding Bindings to non-FrameworkElements
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor(System.Object,Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="changedHandler">Callback whenever the value of this binding has changed.</param>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Binding">
            <summary>
            The Binding which is to be evaluated
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Element">
            <summary>
            The element to be used as the context on which to evaluate the binding.
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Value">
            <summary>
            The current value of this binding.
            </summary>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler">
            <summary>
            Delegate for when the binding listener has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs">
            <summary>
            Event args for when binding values change.
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.#ctor(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.EventArgs">
            <summary>
            Original event args.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            </summary>
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> dependency property
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.#ctor">
            <summary>
            Initializes a new instance of the EventToCommand class.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a FrameworkElement.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnDetaching">
            <summary>
            Called when this trigger is detached from its associated object.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>
            Provides a simple way to invoke this trigger programatically
            without any EventArgs.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>
            Executes the trigger.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <param name="parameter">The EventArgs of the fired event.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>
            Gets or sets the ICommand that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This is a DependencyProperty. Because of limitations
            of Silverlight, you can only set databindings on this property. If you
            wish to use hard coded values, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue"/>
            property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This is NOT a DependencyProperty. Use this
            property if you want to set a hard coded value.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. If this property
            is false, the element will not be disabled when the command's
            CanExecute method changes.
            If the attached element is not a <see cref="T:System.Windows.Controls.Control"/>, this property
            has no effect. 
            This is a DependencyProperty.
            Because of limitations of Silverlight, you can only set databindings 
            on this property. If you wish to use hard coded values, use 
            the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled.
            If the attached element is not a <see cref="T:System.Windows.Controls.Control"/>, this property
            has no effect. 
            This property is here for compatibility with the Silverlight version. 
            This is NOT a DependencyProperty.
            Use this property if you want to set a hard coded value.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>
            Gets or sets a value indicating whether the EventArgs passed to the
            event handler will be forwarded to the ICommand's Execute method
            when the event is fired (if the bound ICommand accepts an argument
            of type EventArgs).
            <para>For example, use a RelayCommand&lt;MouseEventArgs&gt; to get
            the arguments of a MouseMove event.</para>
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Threading.DispatcherHelper">
            <summary>
            Helper class for dispatcher operations on the UI thread.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.CheckBeginInvokeOnUI(System.Action)">
            <summary>
            Executes an action on the UI thread. If this method is called
            from the UI thread, the action is executed immendiately. If the
            method is called from another thread, the action will be enqueued
            on the UI thread's dispatcher and executed asynchronously.
            <para>For additional operations on the UI thread, you can get a
            reference to the UI thread's dispatcher thanks to the property
            <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/></para>.
            </summary>
            <param name="action">The action that will be executed on the UI
            thread.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize">
            <summary>
            This method should be called once on the UI thread to ensure that
            the <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/> property is initialized.
            <para>In a Silverlight application, call this method in the
            Application_Startup event handler, after the MainPage is constructed.</para>
            <para>In WPF, call this method on the static App() constructor.</para>
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher">
            <summary>
            Gets a reference to the UI thread's dispatcher, after the
            <see cref="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize"/> method has been called on the UI thread.
            </summary>
        </member>
    </members>
</doc>
